{"version":3,"file":"static/js/247.d0576c91.chunk.js","mappings":"kOAqDA,UAhDa,WACX,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACb,IAAMI,EAAW,mCAAG,8GAEGC,EAAAA,EAAAA,IAAgBJ,GAFnB,OAEVK,EAFU,OAGhBR,EAAWQ,EAAKC,MAHA,gDAKhBC,QAAQC,IAAI,KAAMC,SALF,yBAOhBV,GAAa,GAPG,4EAAH,qDAUjBI,GACD,GAAE,CAACH,IAEAF,GAAkB,SAAC,IAAD,KAGpB,iCACE,wBAAI,UACHF,IAAY,KACX,wBACGA,EAAQc,KAAI,SAAAC,GAAM,OACjB,2BACE,gBAEEC,IACED,EAAOE,aAAP,0CACuCF,EAAOE,cAC1C,sDAENC,IAAKH,EAAOI,QAEd,uBAAIJ,EAAOI,QACX,yBAAG,cAAYJ,EAAOK,eAXfL,EAAOM,GADC,QAmB5B,C,sLCnDKC,EAAW,gCAGXC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIOC,EAAiB,mCAAG,sGACbC,MAAM,GAAD,OAClBP,EADkB,2CAZT,6CAWiB,cACzBQ,EADyB,gBAIZA,EAAIC,OAJQ,cAIzBtB,EAJyB,yBAKxBA,GALwB,2CAAH,qDAQjBuB,EAAa,mCAAG,WAAMX,GAAN,yFACTQ,MAAM,GAAD,OAAIP,EAAJ,iBAAqBD,EAArB,mBAA0CE,GADtC,cACrBO,EADqB,gBAERA,EAAIC,OAFI,cAErBtB,EAFqB,yBAGpBA,GAHoB,2CAAH,sDAMbwB,EAAe,mCAAG,WAAMC,GAAN,yFACXL,MAAM,GAAD,OAClBP,EADkB,8BACYY,EADZ,8CAErBX,GAH2B,cACvBO,EADuB,gBAKVA,EAAIC,OALM,cAKvBtB,EALuB,yBAMtBA,GANsB,2CAAH,sDASfD,EAAe,mCAAG,WAAMa,GAAN,yFACXQ,MAAM,GAAD,OAClBP,EADkB,iBACDD,EADC,2BAErBE,GAH2B,cACvBO,EADuB,gBAKVA,EAAIC,OALM,cAKvBtB,EALuB,yBAMtBA,GANsB,2CAAH,sDASf0B,EAAe,mCAAG,WAAMd,GAAN,yFACXQ,MAAM,GAAD,OAClBP,EADkB,iBACDD,EADC,kCAErBE,GAH2B,cACvBO,EADuB,gBAKVA,EAAIC,OALM,cAKvBtB,EALuB,yBAMtBA,GANsB,2CAAH,qD,sBC5C5B,SAAS2B,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,EAEvC,CAEe,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,EACnE,CAEAjB,OAAMkB,EACR,GACF,CACF,C","sources":["components/Cast/Cast.jsx","services/getMovies.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'services/getMovies';\nimport { Loader } from '../Loader/Loader';\n\nconst Cast = () => {\n  const [credits, setCredits] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const getCastInfo = async () => {\n      try {\n        const data = await getMovieCredits(movieId);\n        setCredits(data.cast);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getCastInfo();\n  }, [movieId]);\n\n  if (isLoading) return <Loader />;\n\n  return (\n    <>\n      <h2>Cast:</h2>\n      {credits !== [] && (\n        <ul>\n          {credits.map(credit => (\n            <li key={credit.id}>\n              <img\n                // className={styles.ImageGalleryItemImage}\n                src={\n                  credit.profile_path\n                    ? `https://image.tmdb.org/t/p/w200/${credit.profile_path}`\n                    : 'https://cdn-icons-png.flaticon.com/256/20/20773.png'\n                }\n                alt={credit.name}\n              />\n              <p>{credit.name}</p>\n              <p>Character: {credit.character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'api_key=d30846261444a5a49dd702fa51e06838';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkMzA4NDYyNjE0NDRhNWE0OWRkNzAyZmE1MWUwNjgzOCIsInN1YiI6IjY0N2EwNmVhMGUyOWEyMDExNmFjMjc4ZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.tsNk25POiqhHGD8XWZG5zrh-GEA1QO3lFkkZCPF82kY',\n  },\n};\n\nexport const getTrendingMovies = async () => {\n  const res = await fetch(\n    `${BASE_URL}trending/all/day?language=en-US&${API_KEY}`\n  );\n  const data = await res.json();\n  return data;\n};\n\nexport const getMoviesById = async id => {\n  const res = await fetch(`${BASE_URL}movie/${id}language=en-US&`, options);\n  const data = await res.json();\n  return data;\n};\n\nexport const getMoviesByName = async query => {\n  const res = await fetch(\n    `${BASE_URL}search/movie?query=${query}&include_adult=false&language=en-US&page=1`,\n    options\n  );\n  const data = await res.json();\n  return data;\n};\n\nexport const getMovieCredits = async id => {\n  const res = await fetch(\n    `${BASE_URL}movie/${id}/credits?language=en-US`,\n    options\n  );\n  const data = await res.json();\n  return data;\n};\n\nexport const getMovieReviews = async id => {\n  const res = await fetch(\n    `${BASE_URL}movie/${id}/reviews?language=en-US&page=1`,\n    options\n  );\n  const data = await res.json();\n  return data;\n};\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","credits","setCredits","isLoading","setIsLoading","movieId","useParams","useEffect","getCastInfo","getMovieCredits","data","cast","console","log","message","map","credit","src","profile_path","alt","name","character","id","BASE_URL","options","method","headers","accept","Authorization","getTrendingMovies","fetch","res","json","getMoviesById","getMoviesByName","query","getMovieReviews","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}